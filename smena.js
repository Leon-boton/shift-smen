document.addEventListener("DOMContentLoaded", function () {
    // –≠–ª–µ–º–µ–Ω—Ç—ã
    const newShiftBtn = document.getElementById("newShiftBtn");
    const shiftModal = document.getElementById("shiftModal");
    const shiftType = document.getElementById("shiftType");
    const shiftDate = document.getElementById("shiftDate");
    const shiftInfo = document.getElementById("shiftInfo");
    const saveShift = document.getElementById("saveShift");

    const openShiftList = document.getElementById("openShiftList");
    const shiftListModal = document.getElementById("shiftListModal");
    const shiftList = document.getElementById("shiftList");
    const closeShiftModal = document.getElementById("closeShiftModal");
    const closeShiftList = document.getElementById("closeShiftList");
    const shiftCountDisplay = document.getElementById("shiftCount");

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –º–æ–¥–∞–ª–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    document.querySelectorAll(".modal").forEach(m => m.style.display = "none");

    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    shiftDate.value = new Date().toISOString().split("T")[0];

    // –õ–æ–≥–≥–µ—Ä –≤ –º–µ–Ω—é
    function log(msg) {
        const box = document.getElementById("logBox");
        if (!box) return;
        const time = new Date().toLocaleTimeString();
        const div = document.createElement("div");
        div.textContent = `[${time}] ${msg}`;
        box.appendChild(div);
        box.scrollTop = box.scrollHeight;
    }

    // –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ—ã –æ —Å–º–µ–Ω–µ
    function updateShiftInfo() {
        const type = shiftType.value;
        const dateStr = shiftDate.value.split("-").reverse().join(".");
        const time = type === "day" ? "07:00" : "19:00";
        shiftInfo.textContent = `–°–º–µ–Ω–∞: ${type === "day" ? "–î–µ–Ω—å" : "–ù–æ—á—å"}, –î–∞—Ç–∞: ${dateStr}, –í—Ä–µ–º—è: ${time}`;
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    shiftType.addEventListener("change", updateShiftInfo);
    shiftDate.addEventListener("change", updateShiftInfo);

    newShiftBtn.addEventListener("click", () => {
        shiftModal.style.display = "flex";
        shiftDate.value = new Date().toISOString().split("T")[0];
        shiftModal.dataset.editingKey = ""; // —Å–±—Ä–æ—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        updateShiftInfo();
        log("–û—Ç–∫—Ä—ã—Ç–∞ —Ñ–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ–Ω—ã");
    });

    closeShiftModal.addEventListener("click", () => {
        shiftModal.style.display = "none";
    });

    closeShiftList.addEventListener("click", () => {
        shiftListModal.style.display = "none";
    });

    window.addEventListener("click", (e) => {
        if (e.target === shiftModal) shiftModal.style.display = "none";
        if (e.target === shiftListModal) shiftListModal.style.display = "none";
    });

    //1Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–º–µ–Ω—É
    saveShift.addEventListener("click", () => {
        const type = shiftType.value;
        const time = type === "day" ? "07:00" : "19:00";
        const dateStr = shiftDate.value.split("-").reverse().join(".");
        const key = `shift-${shiftDate.value}`;

//2Ô∏è‚É£–µ–±–∞—Ç—å —Ç—É—Ç —Ä–µ–¥ –≤ —Å–ø–∏—Å–∫–µ —Å–º–µ–Ω
//saveShift.replaceWith(saveShift.cloneNode(true));

//saveShift.addEventListener("click", () => {
    // –ó–∞–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ä—É—é –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–æ–Ω (—Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏)
const newSaveShift = saveShift.cloneNode(true);
saveShift.parentNode.replaceChild(newSaveShift, saveShift);

// –ù–∞–∑–Ω–∞—á–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É
newSaveShift.addEventListener("click", () => {
 
const type = shiftType.value;
    const time = type === "day" ? "07:00" : "19:00";
    const dateStr = shiftDate.value.split("-").reverse().join(".");
    const key = `shift-${shiftDate.value}`;
    const editingKey = shiftModal.dataset.editingKey;

    let shifts = JSON.parse(localStorage.getItem("shifts") || "[]");
    
    if (editingKey) {
        shifts = shifts.filter(shift => shift.id !== Number(editingKey));
        delete shiftModal.dataset.editingKey;
    }

    const newShift = {
        id: Date.now(),
        name: type === "day" ? "–î–µ–Ω—å" : "–ù–æ—á—å",
        date: shiftDate.value,
        startTime: time,
        shiftType: type,
        remindBefore: 30,
        isDone: false
    };

    shifts.push(newShift);
    localStorage.setItem("shifts", JSON.stringify(shifts));
    localStorage.setItem(key, JSON.stringify({
        type,
        date: dateStr,
        time
    }));

    shiftModal.style.display = "none";
    log(`–°–º–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${dateStr} ‚Äî ${type} –≤ ${time}`);


//renderCalendar(currentMonth, currentYear);
if (typeof renderCalendar === "function") {
  const now = new Date();
  renderCalendar(now.getMonth(), now.getFullYear());
}

    renderShiftList();
    updateNextShiftWidget();
});
    
//!!
        const shiftData = {
            type,
            date: dateStr,
            time
        };

        localStorage.setItem(key, JSON.stringify(shiftData));
//—Ö—É–π
// 3Ô∏è‚É£–¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –º–∞—Å—Å–∏–≤ shifts[] (–¥–ª—è –ø–æ–¥—Å—á—ë—Ç–æ–≤ –∏ —Å–ø–∏—Å–∫–∞)
let shifts = JSON.parse(localStorage.getItem("shifts") || "[]");
shifts.push({
    id: Date.now(),
    name: type === "day" ? "–î–µ–Ω—å" : "–ù–æ—á—å",
    date: shiftDate.value, // YYYY-MM-DD
    startTime: time,
    shiftType: type,
    remindBefore: 30,
    isDone: false
 });
localStorage.setItem("shifts", JSON.stringify(shifts));

//
        shiftModal.style.display = "none";
        log(`–°–º–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${shiftData.date} ‚Äî ${shiftData.type} –≤ ${shiftData.time}`);

        if (typeof renderCalendar === "function") {
            const now = new Date();
            renderCalendar(now.getMonth(), now.getFullYear());
        }

        renderShiftList();
updateNextShiftWidget();
    });

    // –°–ø–∏—Å–æ–∫ —Å–º–µ–Ω
    openShiftList.addEventListener("click", () => {
        renderShiftList();
        shiftListModal.style.display = "flex";
    });
//ü§¨ü§¨ü§¨ü§¨
function renderShiftList() {
    shiftList.innerHTML = "";
    
    // –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ —Å–º–µ–Ω
    const shifts = JSON.parse(localStorage.getItem("shifts") || "[]");

    if (shiftCountDisplay) {
        shiftCountDisplay.textContent = `(${shifts.length})`;
    }

    if (shifts.length === 0) {
        shiftList.innerHTML = "<p>–°–º–µ–Ω –ø–æ–∫–∞ –Ω–µ—Ç</p>";
        return;
    }

    // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –º–∞—Å—Å–∏–≤ —Å–º–µ–Ω
    shifts.forEach(shift => {
        const div = document.createElement("div");
        div.className = "shift-entry";
        div.innerHTML = `
            <strong>${shift.date}</strong> ‚Äî ${shift.shiftType === "day" ? "–î–µ–Ω—å" : "–ù–æ—á—å"} –≤ ${shift.startTime}
            <button class="edit-btn" data-key="${shift.id}">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
            <button class="delete-btn" data-key="${shift.id}">–£–¥–∞–ª–∏—Ç—å</button>
        `;
        shiftList.appendChild(div);
    });

    // –£–¥–∞–ª–µ–Ω–∏–µ —Å–º–µ–Ω—ã –∏–∑ –∫–∞–ª–µ–Ω–¥—Ä—è 06.04 
    shiftList.querySelectorAll(".delete-btn").forEach(btn => {
  btn.addEventListener("click", (e) => {
    const id = Number(e.target.dataset.key);
    let shifts = JSON.parse(localStorage.getItem("shifts") || "[]");
    const shiftToRemove = shifts.find(s => s.id === id);

    if (shiftToRemove) {
      // –£–¥–∞–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å –ø–æ –¥–∞—Ç–µ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
      const shiftDateKey = `shift-${shiftToRemove.date}`;
      localStorage.removeItem(shiftDateKey);

      // –£–¥–∞–ª—è–µ–º –ø–æ "—á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–º—É" –∫–ª—é—á—É, –µ—Å–ª–∏ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
      const [y, m, d] = shiftToRemove.date.split("-");
      const altKey = `${parseInt(d)}-${parseInt(m)}-${y}`;
      localStorage.removeItem(altKey);

      // –£–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å —Å —è—á–µ–π–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –±–µ–∑ –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
      const dateKey = `${Number(d)}-${Number(m)}-${y}`; // –ë–µ–∑ –≤–µ–¥—É—â–∏—Ö –Ω—É–ª–µ–π
const cell = document.querySelector(`[data-date="${dateKey}"]`);
if (cell) {
  cell.classList.remove("shift-day", "shift-night", "has-event");
}
    }

    shifts = shifts.filter(s => s.id !== id);
    localStorage.setItem("shifts", JSON.stringify(shifts));

    renderShiftList();
    renderCalendar(currentMonth, currentYear);
    updateMonthStats(currentMonth, currentYear);
    updateNextShiftWidget();
  });
});
//–¥–æ —Å—é–¥–∞ ‚ùå‚ùå‚ùå
    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–µ–Ω—ã
    shiftList.querySelectorAll(".edit-btn").forEach(btn => {
        btn.addEventListener("click", (e) => {
            const id = Number(e.target.dataset.key);
            const shift = shifts.find(s => s.id === id);
            if (!shift) return;

            shiftType.value = shift.shiftType;
            shiftDate.value = shift.date;
            updateShiftInfo();
            shiftModal.style.display = "flex";
            shiftListModal.style.display = "none";
            shiftModal.dataset.editingKey = shift.id;
        });
    });
}
});

//üò±—É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–º–µ–Ω—ã –∏–∑ –ª–æ–∫–∞–ª–∏—Ç–∏ 
document.getElementById("clearShiftsBtn")?.addEventListener("click", () => {
  if (confirm("–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–º–µ–Ω—ã?")) {
    localStorage.removeItem("shifts");

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–ª—é—á–∏ –≤–∏–¥–∞ shift-YYYY-MM-DD –∏ DD-MM-YYYY
    Object.keys(localStorage).forEach(key => {
      if (key.startsWith("shift-")) {
        localStorage.removeItem(key);
      }
      if (/^\d{1,2}-\d{1,2}-\d{4}$/.test(key)) {
        localStorage.removeItem(key);
      }
    });

    // –û—á–∏—Å—Ç–∫–∞ DOM
    document.querySelectorAll(".calendar-day").forEach(day => {
      day.classList.remove("shift-day", "shift-night", "has-event");
      day.style.backgroundColor = "";
      day.style.color = "";
      if (day.dataset.day) {
        day.innerHTML = day.dataset.day;
      }
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if (typeof renderCalendar === "function") {
      const now = new Date();
      renderCalendar(now.getMonth(), now.getFullYear());
    }
    if (typeof renderShiftsList === "function") renderShiftsList();
    if (typeof updateNextShiftWidget === "function") updateNextShiftWidget();
    if (typeof updateMonthStats === "function") {
      const now = new Date();
      updateMonthStats(now.getMonth(), now.getFullYear());
    }

    alert("–í—Å–µ —Å–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω—ã");
  }
});
// –∞—Ä—Ö–∏–≤ —Å–º–µ–Ω
const openArchiveModal = document.getElementById("openArchiveModal");
const closeArchiveModal = document.getElementById("closeArchiveModal");
const archiveModal = document.getElementById("archiveModal");
const archiveMonthSelect = document.getElementById("archiveMonthSelect");
const archiveShiftList = document.getElementById("archiveShiftList");

openArchiveModal.addEventListener("click", () => {
  archiveModal.style.display = "flex";
  fillArchiveMonths();
});

closeArchiveModal.addEventListener("click", () => {
  archiveModal.style.display = "none";
});

window.addEventListener("click", (e) => {
  if (e.target === archiveModal) {
    archiveModal.style.display = "none";
  }
});

function fillArchiveMonths() {
  const keys = Object.keys(localStorage).filter(k => k.startsWith("shift-"));
  const months = new Set(
    keys.map(k => k.slice(6, 13)) // –∏–∑ shift-2025-04-11 ‚Üí 2025-04
  );

  archiveMonthSelect.innerHTML = "";
  months.forEach(month => {
    const option = document.createElement("option");
    option.value = month;
    option.textContent = month;
    archiveMonthSelect.appendChild(option);
  });

  renderArchiveShifts(archiveMonthSelect.value);
}

archiveMonthSelect.addEventListener("change", () => {
  renderArchiveShifts(archiveMonthSelect.value);
});
//!!!!!!
function renderArchiveShifts(month) {
  const keys = Object.keys(localStorage);
  const result = [];

  // 1. –ò—â–µ–º shift-2025-04-11
  const shiftKeys = keys.filter(k => k.startsWith("shift-" + month));
  shiftKeys.forEach(k => {
    const data = JSON.parse(localStorage.getItem(k));
    result.push({
      date: data.date,
      type: data.type,
      time: data.time
    });
  });

  // 2. –ò—â–µ–º –æ–±—ã—á–Ω—ã–µ –∫–ª—é—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 11-4-2025)
  keys.forEach(k => {
    if (/^\d{1,2}-\d{1,2}-\d{4}$/.test(k)) {
      const [d, m, y] = k.split("-");
      const normalizedMonth = `${y}-${m.padStart(2, "0")}`;
      if (normalizedMonth === month) {
        const data = JSON.parse(localStorage.getItem(k));
        const shiftType = data.title?.toLowerCase().includes("–Ω–æ—á—å") ? "night" : "day";
        result.push({
          date: `${y}-${m.padStart(2, "0")}-${d.padStart(2, "0")}`,
          type: shiftType,
          time: data.time || ""
        });
      }
    }
  });

  if (result.length === 0) {
    archiveShiftList.innerHTML = "<p>–°–º–µ–Ω –Ω–µ—Ç</p>";
    return;
  }

  archiveShiftList.innerHTML = result.map(shift => {
    return `<div><strong>${shift.date}</strong> ‚Äî ${shift.type === "day" ? "–î–µ–Ω—å" : "–ù–æ—á—å"} –≤ ${shift.time}</div>`;
  }).join("");
}

//–ü–û–ò–°–ö –°–ú–ï–ù

document.getElementById("shiftSearchInput").addEventListener("change", (e) => {
  const inputDate = e.target.value; // –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
  const shifts = JSON.parse(localStorage.getItem("shifts") || "[]");

  const match = shifts.find(s => s.date === inputDate);

  const resultBox = document.getElementById("shiftSearchResult");
  if (match) {
    resultBox.innerHTML = `
    <p>‚úÖ <b>–°–º–µ–Ω–∞:</b> ${match.name} –≤ ${match.startTime}</p>
  `;
} else if (match) {
  resultBox.innerHTML = `
    <p>‚ö†Ô∏è –°–º–µ–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ —Ç–∏–ø–∞ –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏.</p>
  `;
} else {
  resultBox.innerHTML = `<p>‚ùå –°–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</p>`;
}
});

//===–ö–¢–û –í –°–ú–ï–ù–ï===

// === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
let cachedWorkbook = null;

window.addEventListener('DOMContentLoaded', () => {
  document.getElementById('shiftFileInput').addEventListener('change', (e) => {
    const reader = new FileReader();
    reader.onload = (event) => {
      const data = new Uint8Array(event.target.result);
      const workbook = XLSX.read(data, { type: 'array' });
      const sheet = workbook.Sheets[workbook.SheetNames[0]];
      const json = XLSX.utils.sheet_to_json(sheet, { header: 1 });

      const monthHeader = json[0][0];
      const parsed = /([–∞-—è–ê-–Ø]+)\s+(\d{4})/.exec(monthHeader || '');
      const monthMap = {
        '—è–Ω–≤–∞—Ä—å': '01', '—Ñ–µ–≤—Ä–∞–ª—å': '02', '–º–∞—Ä—Ç': '03', '–∞–ø—Ä–µ–ª—å': '04', '–º–∞–π': '05',
        '–∏—é–Ω—å': '06', '–∏—é–ª—å': '07', '–∞–≤–≥—É—Å—Ç': '08', '—Å–µ–Ω—Ç—è–±—Ä—å': '09',
        '–æ–∫—Ç—è–±—Ä—å': '10', '–Ω–æ—è–±—Ä—å': '11', '–¥–µ–∫–∞–±—Ä—å': '12'
      };

      const now = new Date();
      let year = now.getFullYear();
      let month = String(now.getMonth() + 1).padStart(2, '0');
      if (parsed) {
        year = parsed[2];
        month = monthMap[parsed[1].toLowerCase()] || month;
      }

      const key = `shifts_${year}_${month}`;
      localStorage.setItem(key, JSON.stringify(json));
      alert(`–ì—Ä–∞—Ñ–∏–∫ –∑–∞ ${month}.${year} —Å–æ—Ö—Ä–∞–Ω—ë–Ω`);

      cachedWorkbook = {
        Sheets: { Sheet1: XLSX.utils.aoa_to_sheet(json) },
        SheetNames: ['Sheet1']
      };

      updateAvailableMonths();
      tryShowShifts();
    };
    reader.readAsArrayBuffer(e.target.files[0]);
  });

  document.getElementById('monthSelector').addEventListener('change', (e) => {
    const key = e.target.value;
    const saved = localStorage.getItem(key);
    if (saved) {
      const json = JSON.parse(saved);
      cachedWorkbook = {
        Sheets: { Sheet1: XLSX.utils.aoa_to_sheet(json) },
        SheetNames: ['Sheet1']
      };
      tryShowShifts();
    }
  });

  document.getElementById('shiftQueryDate')?.addEventListener('change', tryShowShifts);

  document.getElementById('whoInShiftBtn')?.addEventListener('click', () => {
    document.getElementById('whoInShiftModal').style.display = 'flex';
  });

  document.getElementById('closeWhoInShift')?.addEventListener('click', () => {
    document.getElementById('whoInShiftModal').style.display = 'none';
  });

  window.addEventListener('click', (e) => {
    const modal = document.getElementById('whoInShiftModal');
    if (e.target === modal) modal.style.display = 'none';
  });

  updateAvailableMonths();

  // === –ê–í–¢–û–ü–û–î–ì–†–£–ó–ö–ê –ü–û–°–õ–ï–î–ù–ï–ì–û –ú–ï–°–Ø–¶–ê ===
  const keys = Object.keys(localStorage).filter(k => k.startsWith('shifts_') && !k.includes('__backup_')).sort();
  if (keys.length) {
    const latestKey = keys[keys.length - 1];
    const json = JSON.parse(localStorage.getItem(latestKey));
    cachedWorkbook = {
      Sheets: { Sheet1: XLSX.utils.aoa_to_sheet(json) },
      SheetNames: ['Sheet1']
    };
    document.getElementById('monthSelector').value = latestKey;
    tryShowShifts();
  }
});

function updateAvailableMonths() {
  const select = document.getElementById('monthSelector');
  if (!select) return;

  select.innerHTML = '';
select.style.display = 'block'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, –µ—Å–ª–∏ –±—ã–ª —Å–∫—Ä—ã—Ç
  const keys = Object.keys(localStorage).filter(k => k.startsWith('shifts_') && !k.includes('__backup_'));
  keys.sort().reverse().forEach(key => {
    const option = document.createElement('option');
    option.value = key;
    option.textContent = key.replace('shifts_', '').replace('_', '.');
    select.appendChild(option);
  });
}

function tryShowShifts() {
  const dateValue = document.getElementById('shiftQueryDate').value;
  if (!cachedWorkbook || !dateValue) {
    document.getElementById('shiftResults').innerHTML = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö: –≥—Ä–∞—Ñ–∏–∫ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–ª–∏ –¥–∞—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.';
    return;
  }

  const day = new Date(dateValue).getDate();
  const sheet = cachedWorkbook.Sheets[cachedWorkbook.SheetNames[0]];
  const json = XLSX.utils.sheet_to_json(sheet, { header: 1 });
  const headerRow = json[1];

  const colDebug = headerRow.map(c => ({
    raw: c,
    number: Number(c),
    type: typeof c
  }));

  const dateColIndex = colDebug.findIndex(col => col.number === day);

  if (dateColIndex === -1) {
    document.getElementById('shiftResults').innerHTML = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —ç—Ç—É –¥–∞—Ç—É.';
    return;
  }

  let dayShift = [], nightShift = [];

  for (let i = 2; i < json.length; i++) {
    const row = json[i];
    const fio = row[0];
    if (!fio || typeof fio !== 'string') continue;
    if (!/^[–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+\s+[–ê-–Ø–ÅA-Z]\.[–ê-–Ø–ÅA-Z]\.$/.test(fio)) continue;

    const shift = row[dateColIndex]?.toString().trim();
    if (shift === '–î') dayShift.push(fio);
    if (shift === '–ù') nightShift.push(fio);
  }

  const resultBox = document.getElementById("shiftResults");
  resultBox.innerHTML = `
    <h4>–î–Ω–µ–≤–Ω–∞—è —Å–º–µ–Ω–∞:</h4><div>${dayShift.join('<br>') || '‚Äî'}</div>
    <h4>–ù–æ—á–Ω–∞—è —Å–º–µ–Ω–∞:</h4><div>${nightShift.join('<br>') || '‚Äî'}</div>`;
}

// —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏


document.getElementById('clearShiftGraphsBtn')?.addEventListener('click', () => {
  const keys = Object.keys(localStorage).filter(k => k.startsWith('shifts_') && !k.includes('__backup_'));
  if (!keys.length) {
    alert('–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤.');
    return;
  }

  const confirmDelete = confirm(`–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏ —Å–º–µ–Ω (${keys.length})?`);
  if (!confirmDelete) return;

  keys.forEach(k => localStorage.removeItem(k));
  updateAvailableMonths();
  cachedWorkbook = null;
  document.getElementById('shiftResults').innerHTML = '–ì—Ä–∞—Ñ–∏–∫–∏ —É–¥–∞–ª–µ–Ω—ã.';
});